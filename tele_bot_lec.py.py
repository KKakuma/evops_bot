import telebot
import re
import logging


API_TOKEN = '7352442248:AAH9iCQ63EBR9fZ7n4Nm9wb2Jzu8eEPq9mg'

logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

bot = telebot.TeleBot(API_TOKEN)

EMAIL_REGEX = r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+'
PHONE_REGEX = r'(\+7\d{10}|8\d{10})'
PASSWORD_REGEX = r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()]).{8,}$'

def read_emails_from_file():
    try:
        with open('emails.txt', 'r') as file:
            return file.read()
    except FileNotFoundError:
        logging.error("File emails.txt not found.")
        return ""

def read_phones_from_file():
    try:
        with open('phones.txt', 'r') as file:
            return file.read()
    except FileNotFoundError:
        logging.error("File phones.txt not found.")
        return ""

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–µ–∫—Å—Ç–µ.\n"
                      "–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /find_email, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ email-–∞–¥—Ä–µ—Å–∞ .\n"
                      "–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /find_phone_number, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.\n"
                      "–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /verify_password, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.\n"
                      "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /help.")
    
@bot.message_handler(commands=['help'])
def send_help(message):
    bot.reply_to(message, "–Ø —É–º–µ—é —Å–ª–µ–¥—É—é—â–µ–µ:\n"
                        "/find_email: –ù–∞–π–¥–∏ email-–∞–¥—Ä–µ—Å–∞ –≤ —Ç–µ–∫—Å—Ç–µ.\n"
                        "/find_phone_number: –ù–∞–π–¥–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ.\n"
                        "/verify_password: –ü—Ä–æ–≤–µ—Ä—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–∂–Ω—ã–º —è–≤–ª—è–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å.\n"
                        "–ù–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–µ–¥–∏ /find_email, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ email-–∞–¥—Ä–µ—Å–∞.")

@bot.message_handler(commands=['find_email'])
def handle_find_email(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ email-–∞–¥—Ä–µ—Å–æ–≤.")
    bot.register_next_step_handler(message, find_email)

def find_email(message):
    text = message.text
    emails_content = read_emails_from_file()
    emails = re.findall(EMAIL_REGEX, emails_content)
    if emails:
        found_emails = [email for email in emails if email in text]
        if found_emails:
            bot.send_message(message.chat.id, "–ù–∞–π–¥–µ–Ω–Ω—ã–µ email-–∞–¥—Ä–µ—Å–∞:\n" + "\n".join(found_emails))
            logging.info(f"Found emails: {found_emails} in provided text and emails.txt")
        else:
            bot.send_message(message.chat.id, "Email-–∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ.")
            logging.info("No emails found in provided text.")
    else:
        bot.send_message(message.chat.id, "Email-–∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ.")
        logging.info("No emails found in emails.txt")

@bot.message_handler(commands=['find_phone_number'])
def handle_find_phone_number(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.")
    bot.register_next_step_handler(message, find_phone_number)

def find_phone_number(message):
    text = message.text
    phones_content = read_phones_from_file()
    phone_numbers = re.findall(PHONE_REGEX, phones_content)
    if phone_numbers:
        found_numbers = [number for number in phone_numbers if number in text]
        if found_numbers:
            bot.send_message(message.chat.id, "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:\n" + "\n".join(found_numbers))
            logging.info(f"Found phone numbers: {found_numbers} in provided text and phones.txt")
        else:
            bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ.")
            logging.info("No phone numbers found in provided text.")
    else:
        bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ.")
        logging.info("No phone numbers found in phones.txt")

@bot.message_handler(commands=['verify_password'])
def handle_verify_password(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.")
    bot.register_next_step_handler(message, verify_password)

def verify_password(message):
    password = message.text
    if re.match(PASSWORD_REGEX, password):
        bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—å —Å–ª–æ–∂–Ω—ã–π.")
        logging.info(f"Password verified as strong: {password}")
    else:
        bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—å –ø—Ä–æ—Å—Ç–æ–π.")
        logging.info(f"Password verified as weak: {password}")

bot.polling(none_stop=True)